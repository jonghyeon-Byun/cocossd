{"version":3,"sources":["index.js"],"names":["App","canvasRef","React","createRef","videoRef","detectFrame","video","model","detect","then","prediction","renderPredictions","requestAnimationFrame","ctx","current","getContext","clearRect","canvas","width","height","font","textBaseline","forEach","x","bbox","y","strokeStyle","lineWidth","strokeRect","fillStyle","textWidth","measureText","class","textHeight","parseInt","fillRect","fillText","navigator","mediaDevices","getUserMedia","webCamPromise","audio","facingMode","stream","window","srcObject","Promise","resolve","reject","onloadedmetadata","modelPromise","cocoSsd","all","values","catch","error","console","className","autoPlay","playsInline","muted","ref","this","innerWidth","innerHeight","Component","ReactDOM","render","document","getElementById"],"mappings":"+SAOMA,G,iNACJC,UAAYC,IAAMC,Y,EAClBC,SAAWF,IAAMC,Y,EA+BjBE,YAAc,SAACC,EAAOC,GACpBA,EAAMC,OAAOF,GAAOG,MAAK,SAACC,GACxB,EAAKC,kBAAkBD,GACvBE,uBAAsB,WACpB,EAAKP,YAAYC,EAAOC,U,EAK9BI,kBAAoB,SAACD,GACnB,IAAMG,EAAM,EAAKZ,UAAUa,QAAQC,WAAW,MAC9CF,EAAIG,UAAU,EAAG,EAAGH,EAAII,OAAOC,MAAOL,EAAII,OAAOE,QAEjD,IAAMC,EAAO,kBACbP,EAAIO,KAAOA,EACXP,EAAIQ,aAAe,MACnBX,EAAWY,SAAQ,SAACZ,GAClB,IAAMa,EAAIb,EAAWc,KAAK,GACpBC,EAAIf,EAAWc,KAAK,GACpBN,EAAQR,EAAWc,KAAK,GACxBL,EAAST,EAAWc,KAAK,GAE/BX,EAAIa,YAAc,UAClBb,EAAIc,UAAY,EAChBd,EAAIe,WAAWL,EAAGE,EAAGP,EAAOC,GAE5BN,EAAIgB,UAAY,UAChB,IAAMC,EAAYjB,EAAIkB,YAAYrB,EAAWsB,OAAOd,MAC9Ce,EAAaC,SAASd,EAAM,GAClCP,EAAIsB,SAASZ,EAAGE,EAAGK,EAAY,EAAGG,EAAa,MAGjDvB,EAAWY,SAAQ,SAACZ,GAClB,IAAMa,EAAIb,EAAWc,KAAK,GACpBC,EAAIf,EAAWc,KAAK,GAE1BX,EAAIgB,UAAY,UAChBhB,EAAIuB,SAAS1B,EAAWsB,MAAOT,EAAGE,O,kEAlEjB,IAAD,OAClB,GAAIY,UAAUC,cAAgBD,UAAUC,aAAaC,aAAc,CACjE,IAAMC,EAAgBH,UAAUC,aAC7BC,aAAa,CACZE,OAAO,EACPnC,MAAO,CACLoC,WAAY,UAGfjC,MAAK,SAACkC,GAGL,OAFAC,OAAOD,OAASA,EAChB,EAAKvC,SAASU,QAAQ+B,UAAYF,EAC3B,IAAIG,SAAQ,SAACC,EAASC,GAC3B,EAAK5C,SAASU,QAAQmC,iBAAmB,WACvCF,WAIFG,EAAeC,MACrBL,QAAQM,IAAI,CAACF,EAAcV,IACxB/B,MAAK,SAAC4C,GACL,EAAKhD,YAAY,EAAKD,SAASU,QAASuC,EAAO,OAEhDC,OAAM,SAACC,GACNC,QAAQD,MAAMA,S,+BA8CpB,OACE,gCACE,uBACEE,UAAU,OACVC,UAAQ,EACRC,aAAW,EACXC,OAAK,EACLC,IAAKC,KAAK1D,SACVc,MAAO0B,OAAOmB,WACd5C,OAAQyB,OAAOoB,cAEjB,wBACEP,UAAU,OACVI,IAAKC,KAAK7D,UACViB,MAAO0B,OAAOmB,WACd5C,OAAQyB,OAAOoB,qB,GAzFP9D,IAAM+D,YAgGxBC,IAASC,OAAO,cAACnE,EAAD,IAASoE,SAASC,eAAe,W","file":"static/js/main.561c23c0.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\nimport \"@tensorflow/tfjs\";\n\nclass App extends React.Component {\n  canvasRef = React.createRef();\n  videoRef = React.createRef();\n\n  componentDidMount() {\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      const webCamPromise = navigator.mediaDevices\n        .getUserMedia({\n          audio: false,\n          video: {\n            facingMode: \"user\",\n          },\n        })\n        .then((stream) => {\n          window.stream = stream;\n          this.videoRef.current.srcObject = stream;\n          return new Promise((resolve, reject) => {\n            this.videoRef.current.onloadedmetadata = () => {\n              resolve();\n            };\n          });\n        });\n      const modelPromise = cocoSsd.load();\n      Promise.all([modelPromise, webCamPromise])\n        .then((values) => {\n          this.detectFrame(this.videoRef.current, values[0]);\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    }\n  }\n\n  detectFrame = (video, model) => {\n    model.detect(video).then((prediction) => {\n      this.renderPredictions(prediction);\n      requestAnimationFrame(() => {\n        this.detectFrame(video, model);\n      });\n    });\n  };\n\n  renderPredictions = (prediction) => {\n    const ctx = this.canvasRef.current.getContext(\"2d\");\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    const font = \"12px sans-serif\";\n    ctx.font = font;\n    ctx.textBaseline = \"top\";\n    prediction.forEach((prediction) => {\n      const x = prediction.bbox[0];\n      const y = prediction.bbox[1];\n      const width = prediction.bbox[2];\n      const height = prediction.bbox[3];\n\n      ctx.strokeStyle = \"#fc685b\";\n      ctx.lineWidth = 4;\n      ctx.strokeRect(x, y, width, height);\n\n      ctx.fillStyle = \"#fc685b\";\n      const textWidth = ctx.measureText(prediction.class).width;\n      const textHeight = parseInt(font, 8);\n      ctx.fillRect(x, y, textWidth + 4, textHeight + 4);\n    });\n\n    prediction.forEach((prediction) => {\n      const x = prediction.bbox[0];\n      const y = prediction.bbox[1];\n\n      ctx.fillStyle = \"#FFFFFF\";\n      ctx.fillText(prediction.class, x, y);\n    });\n  };\n  render() {\n    return (\n      <div>\n        <video\n          className=\"size\"\n          autoPlay\n          playsInline\n          muted\n          ref={this.videoRef}\n          width={window.innerWidth}\n          height={window.innerHeight}\n        />\n        <canvas\n          className=\"size\"\n          ref={this.canvasRef}\n          width={window.innerWidth}\n          height={window.innerHeight}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}