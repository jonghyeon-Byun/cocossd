{"version":3,"sources":["index.js"],"names":["App","canvasRef","React","createRef","videoRef","detectFrame","video","model","detect","then","prediction","renderPredictions","requestAnimationFrame","ctx","current","getContext","clearRect","canvas","width","height","font","textBaseline","forEach","x","bbox","y","strokeStyle","lineWidth","strokeRect","fillStyle","textWidth","measureText","class","textHeight","parseInt","fillRect","fillText","navigator","mediaDevices","getUserMedia","webCamPromise","audio","facingMode","stream","window","srcObject","Promise","resolve","reject","onloadedmetadata","modelPromise","cocoSsd","all","values","catch","error","console","elem","this","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","id","className","autoPlay","playsInline","muted","ref","innerWidth","innerHeight","Component","ReactDOM","render","document","getElementById"],"mappings":"+SAMMA,G,iNACJC,UAAYC,IAAMC,Y,EAClBC,SAAWF,IAAMC,Y,EAiDjBE,YAAc,SAACC,EAAOC,GACpBA,EAAMC,OAAOF,GAAOG,MAAK,SAACC,GACxB,EAAKC,kBAAkBD,GACvBE,uBAAsB,WACpB,EAAKP,YAAYC,EAAOC,U,EAK9BI,kBAAoB,SAACD,GACnB,IAAMG,EAAM,EAAKZ,UAAUa,QAAQC,WAAW,MAC9CF,EAAIG,UAAU,EAAG,EAAGH,EAAII,OAAOC,MAAOL,EAAII,OAAOE,QAEjD,IAAMC,EAAO,kBACbP,EAAIO,KAAOA,EACXP,EAAIQ,aAAe,MACnBX,EAAWY,SAAQ,SAACZ,GAClB,IAAMa,EAAIb,EAAWc,KAAK,GACpBC,EAAIf,EAAWc,KAAK,GACpBN,EAAQR,EAAWc,KAAK,GACxBL,EAAST,EAAWc,KAAK,GAE/BX,EAAIa,YAAc,UAClBb,EAAIc,UAAY,EAChBd,EAAIe,WAAWL,EAAGE,EAAGP,EAAOC,GAE5BN,EAAIgB,UAAY,UAChB,IAAMC,EAAYjB,EAAIkB,YAAYrB,EAAWsB,OAAOd,MAC9Ce,EAAaC,SAASd,EAAM,IAClCP,EAAIsB,SAASZ,EAAGE,EAAGK,EAAY,EAAGG,EAAa,MAGjDvB,EAAWY,SAAQ,SAACZ,GAClB,IAAMa,EAAIb,EAAWc,KAAK,GACpBC,EAAIf,EAAWc,KAAK,GAE1BX,EAAIgB,UAAY,UAChBhB,EAAIuB,SAAS1B,EAAWsB,MAAOT,EAAGE,O,kEApFjB,IAAD,OAClB,GAAIY,UAAUC,cAAgBD,UAAUC,aAAaC,aAAc,CACjE,IAAMC,EAAgBH,UAAUC,aAC7BC,aAAa,CACZE,OAAO,EACPnC,MAAO,CACLoC,WAAY,UAGfjC,MAAK,SAACkC,GAGL,OAFAC,OAAOD,OAASA,EAChB,EAAKvC,SAASU,QAAQ+B,UAAYF,EAC3B,IAAIG,SAAQ,SAACC,EAASC,GAC3B,EAAK5C,SAASU,QAAQmC,iBAAmB,WACvCF,WAIFG,EAAeC,MACrBL,QAAQM,IAAI,CAACF,EAAcV,IACxB/B,MAAK,SAAC4C,GACL,EAAKhD,YAAY,EAAKD,SAASU,QAASuC,EAAO,OAEhDC,OAAM,SAACC,GACNC,QAAQD,MAAMA,MAGlB,IAAME,EAAOC,KAAKzD,UAEdwD,EAAKE,kBACPF,EAAKE,oBACIF,EAAKG,qBAGdH,EAAKG,uBACIH,EAAKI,wBAGdJ,EAAKI,0BACIJ,EAAKK,qBAGdL,EAAKK,yB,+BA+CT,OACE,sBAAKC,GAAG,SAAR,UACE,uBACEC,UAAU,OACVC,UAAQ,EACRC,aAAW,EACXC,OAAK,EACLC,IAAKV,KAAKtD,SACVc,MAAO0B,OAAOyB,WACdlD,OAAQyB,OAAO0B,cAEjB,wBACEN,UAAU,OACVI,IAAKV,KAAKzD,UACViB,MAAO0B,OAAOyB,WACdlD,OAAQyB,OAAO0B,qB,GA5GPpE,IAAMqE,YAmHxBC,IAASC,OAAO,cAACzE,EAAD,IAAS0E,SAASC,eAAe,W","file":"static/js/main.ee625aff.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\r\nimport \"@tensorflow/tfjs\";\r\n\r\nclass App extends React.Component {\r\n  canvasRef = React.createRef();\r\n  videoRef = React.createRef();\r\n\r\n  componentDidMount() {\r\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n      const webCamPromise = navigator.mediaDevices\r\n        .getUserMedia({\r\n          audio: false,\r\n          video: {\r\n            facingMode: \"user\",\r\n          },\r\n        })\r\n        .then((stream) => {\r\n          window.stream = stream;\r\n          this.videoRef.current.srcObject = stream;\r\n          return new Promise((resolve, reject) => {\r\n            this.videoRef.current.onloadedmetadata = () => {\r\n              resolve();\r\n            };\r\n          });\r\n        });\r\n      const modelPromise = cocoSsd.load();\r\n      Promise.all([modelPromise, webCamPromise])\r\n        .then((values) => {\r\n          this.detectFrame(this.videoRef.current, values[0]);\r\n        })\r\n        .catch((error) => {\r\n          console.error(error);\r\n        });\r\n\r\n      const elem = this.canvasRef;\r\n\r\n      if (elem.requestFullscreen) {\r\n        elem.requestFullscreen();\r\n      } else if (elem.mozRequestFullScreen) {\r\n        /* Firefox */\r\n\r\n        elem.mozRequestFullScreen();\r\n      } else if (elem.webkitRequestFullscreen) {\r\n        /* Chrome, Safari & Opera */\r\n\r\n        elem.webkitRequestFullscreen();\r\n      } else if (elem.msRequestFullscreen) {\r\n        /* IE/Edge */\r\n\r\n        elem.msRequestFullscreen();\r\n      }\r\n    }\r\n  }\r\n\r\n  detectFrame = (video, model) => {\r\n    model.detect(video).then((prediction) => {\r\n      this.renderPredictions(prediction);\r\n      requestAnimationFrame(() => {\r\n        this.detectFrame(video, model);\r\n      });\r\n    });\r\n  };\r\n\r\n  renderPredictions = (prediction) => {\r\n    const ctx = this.canvasRef.current.getContext(\"2d\");\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n\r\n    const font = \"18px sans-serif\";\r\n    ctx.font = font;\r\n    ctx.textBaseline = \"top\";\r\n    prediction.forEach((prediction) => {\r\n      const x = prediction.bbox[0];\r\n      const y = prediction.bbox[1];\r\n      const width = prediction.bbox[2];\r\n      const height = prediction.bbox[3];\r\n\r\n      ctx.strokeStyle = \"#fc685b\";\r\n      ctx.lineWidth = 4;\r\n      ctx.strokeRect(x, y, width, height);\r\n\r\n      ctx.fillStyle = \"#fc685b\";\r\n      const textWidth = ctx.measureText(prediction.class).width;\r\n      const textHeight = parseInt(font, 10);\r\n      ctx.fillRect(x, y, textWidth + 4, textHeight + 4);\r\n    });\r\n\r\n    prediction.forEach((prediction) => {\r\n      const x = prediction.bbox[0];\r\n      const y = prediction.bbox[1];\r\n\r\n      ctx.fillStyle = \"#FFFFFF\";\r\n      ctx.fillText(prediction.class, x, y);\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"screen\">\r\n        <video\r\n          className=\"size\"\r\n          autoPlay\r\n          playsInline\r\n          muted\r\n          ref={this.videoRef}\r\n          width={window.innerWidth}\r\n          height={window.innerHeight}\r\n        />\r\n        <canvas\r\n          className=\"size\"\r\n          ref={this.canvasRef}\r\n          width={window.innerWidth}\r\n          height={window.innerHeight}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}